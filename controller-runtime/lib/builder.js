import { Controller } from './controller.js';
import { Manager } from './manager.js';
import { Reconciler } from './reconcile.js';
import { Source } from './source.js';

/**
 * @typedef {Object} InternalGVK
 * @property {string} kind The resource kind.
 * @property {string} apiVersion The resource API version.
 */

/**
 * Builder exposes simple patterns for building common Controllers.
 */
export class Builder {
  /** @type Manager */
  #manager;
  /** @type InternalGVK | null */
  #forInput;
  /** @type string */
  #name;
  /** @type InternalGVK[] */
  #ownsInput;

  /**
   * Construct a Builder.
   * @param {Manager} manager - The Manager to use.
   */
  constructor(manager) {
    if (!(manager instanceof Manager)) {
      throw new TypeError('manager must be a Manager instance');
    }

    this.#manager = manager;
    this.#name = '';
    this.#forInput = null;
    this.#ownsInput = [];
  }

  /**
   * build() creates and returns a Controller.
   * @param {Reconciler} reconciler - The Reconciler for the new Controller.
   * @returns {Controller}
   */
  build(reconciler) {
    if (!(reconciler instanceof Reconciler)) {
      throw new TypeError('reconciler must be a Reconciler instance');
    }

    const ctrlName = this.#getControllerName();
    const controller = new Controller(ctrlName, { reconciler });
    this.#manager.add(controller);
    this.#setupControllerWatches(controller);
    return controller;
  }

  /**
   * complete() creates a Controller.
   * @param {Reconciler} reconciler - The Reconciler for the new Controller.
   */
  complete(reconciler) {
    this.build(reconciler);
  }

  /**
   * for() defines the type of resource being reconciled, and configures the
   * Controller to respond to events by reconciling.
   * @param {string} kind - The resource kind
   * @param {string} apiVersion - The resource API version.
   * @returns {this}
   */
  for(kind, apiVersion) {
    if (this.#forInput !== null) {
      throw new Error('for() can only be called once');
    }

    this.#forInput = { kind, apiVersion };
    return this;
  }

  /**
   * named() sets the name of the Controller to the given name. The name shows
   * up in metrics, among other things, and thus should be a Prometheus
   * compatible name (underscores and alphanumeric characters only).
   * @param {string} name - The name of the Controller.
   * @returns {this}
   */
  named(name) {
    this.#name = name;
    return this;
  }

  /**
   * owns() defines types of resources being generated by the Controller, and
   * configures the Controller to respond to events by reconciling the owner
   * object.
   * @param {string} kind - The resource kind
   * @param {string} apiVersion - The resource API version.
   * @returns {this}
   */
  owns(kind, apiVersion) {
    this.#ownsInput.push({ kind, apiVersion });
    return this;
  }

  /**
   * watches() This method is incomplete.
   * @returns {this}
   */
  watches() {
    // TODO(cjihrig): Implement this.
    throw new Error('unimplemented');
    return this;
  }

  /**
   * controllerManagedBy() returns a new Controller Builder that is managed by
   * the provided Manager.
   * @param {Manager} manager - The Manager to use.
   * @returns {Builder}
   */
  static controllerManagedBy(manager) {
    return new Builder(manager);
  }

  /**
   * getControllerName() returns the name to use for the Controller. If a name
   * has been explicitly provided, that is used. Otherwise, the name is based on
   * the resource kind of the builder.
   * @returns {string}
   */
  #getControllerName() {
    if (this.#name) {
      return this.#name;
    }

    if (this.#forInput) {
      return this.#forInput.kind.toLowerCase();
    }

    throw new Error('controller has no name. for() or named() must be called');
  }

  /**
   * setupControllerWatches() configures the necessary watchers for the
   * Controller.
   * @param {Controller} ctrl - The Controller to configure.
   */
  #setupControllerWatches(ctrl) {
    if (this.#forInput !== null) {
      const src = new Source(
        this.#manager.kubeconfig,
        this.#manager.client,
        this.#forInput.kind,
        this.#forInput.apiVersion
      );
      ctrl.watch(src);
    }
  }
}

export default { Builder };
