/**
 * @typedef {Object} InternalGVK
 * @property {string} kind The resource kind.
 * @property {string} apiVersion The resource API version.
 */
/**
 * Builder exposes simple patterns for building common Controllers.
 */
export class Builder {
    /**
     * controllerManagedBy() returns a new Controller Builder that is managed by
     * the provided Manager.
     * @param {Manager} manager - The Manager to use.
     * @returns {Builder}
     */
    static controllerManagedBy(manager: Manager): Builder;
    /**
     * Construct a Builder.
     * @param {Manager} manager - The Manager to use.
     */
    constructor(manager: Manager);
    /**
     * build() creates and returns a Controller.
     * @param {Reconciler} reconciler - The Reconciler for the new Controller.
     * @returns {Controller}
     */
    build(reconciler: Reconciler): Controller;
    /**
     * complete() creates a Controller.
     * @param {Reconciler} reconciler - The Reconciler for the new Controller.
     */
    complete(reconciler: Reconciler): void;
    /**
     * for() defines the type of resource being reconciled, and configures the
     * Controller to respond to events by reconciling.
     * @param {string} kind - The resource kind
     * @param {string} apiVersion - The resource API version.
     * @returns {this}
     */
    for(kind: string, apiVersion: string): this;
    /**
     * named() sets the name of the Controller to the given name. The name shows
     * up in metrics, among other things, and thus should be a Prometheus
     * compatible name (underscores and alphanumeric characters only).
     * @param {string} name - The name of the Controller.
     * @returns {this}
     */
    named(name: string): this;
    /**
     * owns() defines types of resources being generated by the Controller, and
     * configures the Controller to respond to events by reconciling the owner
     * object.
     * @param {string} kind - The resource kind
     * @param {string} apiVersion - The resource API version.
     * @returns {this}
     */
    owns(kind: string, apiVersion: string): this;
    /**
     * watches() This method is incomplete.
     * @returns {this}
     */
    watches(): this;
    #private;
}
declare namespace _default {
    export { Builder };
}
export default _default;
export type InternalGVK = {
    /**
     * The resource kind.
     */
    kind: string;
    /**
     * The resource API version.
     */
    apiVersion: string;
};
import { Reconciler } from './reconcile.js';
import { Controller } from './controller.js';
import { Manager } from './manager.js';
